{"version":3,"sources":["components/Layout/Layout.module.css","components/Timer/Timer.module.css","components/Layout/Layout.js","redux/timer/timerActions.js","redux/timer/timerReducer.js","redux/timer/timerOperations.js","redux/timer/timerSelectors.js","common/getTimeFormat.js","components/Timer/Timer.js","components/ButtonControl/ButtonControl.js","App.js","redux/store.js","index.js"],"names":["module","exports","Layout","children","className","styles","container","timerActions","start","createAction","stop","wait","reset","incrementTime","time","createReducer","state","setIntervalId","_","payload","combineReducers","click","timerOperations","onStart","dispatch","setInterval","onStop","clearInterval","onReset","onWait","setTimeout","getTime","timerSelectors","getSetIntervalId","getCurrentFormatByType","createSelector","timeType","value","Math","floor","String","padStart","getTimeFormat","Timer","hours","useSelector","mins","secs","span","ButtonControl","useDispatch","hendlerBtn","e","name","target","type","onClick","disabled","App","store","configureStore","reducer","timerReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28a03865.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__2MN7F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Timer_span__1SV8x\"};","import styles from './Layout.module.css';\n\nexport default function Layout({ children }) {\n  return <div className={styles.container}>{children}</div>;\n}\n","import { createAction } from '@reduxjs/toolkit';\n\nconst start = createAction('START_TIMER');\nconst stop = createAction('STOP_TIMER');\nconst wait = createAction('WAIT_TIMER');\nconst reset = createAction('RESET_TIMAR');\nconst incrementTime = createAction('INCREMENT_TIME');\n\nconst timerActions = {\n  start,\n  stop,\n  wait,\n  reset,\n  incrementTime,\n};\n\nexport default timerActions;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { timerActions } from './';\n\nconst time = createReducer(0, {\n  [timerActions.incrementTime]: state => (state += 1),\n  [timerActions.stop]: () => 0,\n  [timerActions.reset]: () => 0,\n});\n\nconst setIntervalId = createReducer(null, {\n  [timerActions.start]: (_, { payload }) => payload,\n  [timerActions.stop]: () => null,\n  [timerActions.wait]: () => null,\n});\n\nexport default combineReducers({\n  time,\n  setIntervalId,\n});\n","import { timerActions } from './';\n\nlet click = 0;\n\nconst onStart = () => dispatch => {\n  const setIntervalId = setInterval(() => {\n    dispatch(timerActions.incrementTime());\n  }, 1000);\n\n  dispatch(timerActions.start(setIntervalId));\n};\n\nconst onStop = setIntervalId => dispatch => {\n  clearInterval(setIntervalId);\n\n  dispatch(timerActions.stop());\n};\n\nconst onWait = setIntervalId => dispatch => {\n  click += 1;\n\n  setTimeout(() => {\n    if (click < 2) {\n      click = 0;\n    }\n  }, 300);\n\n  if (click < 2) {\n    return;\n  }\n\n  click = 0;\n\n  clearInterval(setIntervalId);\n\n  dispatch(timerActions.wait());\n};\n\nconst onReset = () => dispatch => {\n  dispatch(timerActions.reset());\n};\n\nconst timerOperations = {\n  onStart,\n  onStop,\n  onReset,\n  onWait,\n};\n\nexport default timerOperations;\n","import { createSelector } from '@reduxjs/toolkit';\nimport getTimeFormat from '../../common/getTimeFormat';\n\nconst getTime = state => state.time;\nconst getSetIntervalId = state => state.setIntervalId;\n// const getSeconds = state => state.time;\n// const getMinutes = state => state;\n// const getHours = state => state;\n\nconst getCurrentFormatByType = createSelector(\n  [getTime, (state, timeType) => timeType],\n  (time, timeType) => getTimeFormat(time, timeType)\n);\n\nconst timerSelectors = {\n  getTime,\n  getSetIntervalId,\n  getCurrentFormatByType,\n};\n\nexport default timerSelectors;\n","export default function getTimeFormat(time, timeType) {\n  let value;\n\n  if (timeType === 'hours') {\n    value = Math.floor((time % (60 * 60 * 24)) / (60 * 60));\n  }\n  if (timeType === 'mins') {\n    value = Math.floor((time % (60 * 60)) / 60);\n  }\n  if (timeType === 'secs') {\n    value = Math.floor(time % 60);\n  }\n\n  return String(value).padStart(2, '0');\n}\n","import { useSelector } from 'react-redux';\nimport { timerSelectors } from '../../redux/timer';\nimport styles from './Timer.module.css';\n\nconst timeType = {\n  HOURS: 'hours',\n  MINS: 'mins',\n  SECS: 'secs',\n};\n\nexport default function Timer() {\n  const hours = useSelector(state =>\n    timerSelectors.getCurrentFormatByType(state, timeType.HOURS)\n  );\n\n  const mins = useSelector(state =>\n    timerSelectors.getCurrentFormatByType(state, timeType.MINS)\n  );\n\n  const secs = useSelector(state =>\n    timerSelectors.getCurrentFormatByType(state, timeType.SECS)\n  );\n  return (\n    <span className={styles.span}>\n      {hours}:{mins}:{secs}\n    </span>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { timerSelectors, timerOperations } from '../../redux/timer';\n\nexport default function ButtonControl() {\n  const dispatch = useDispatch();\n\n  const time = useSelector(timerSelectors.getTime);\n  const setIntervalId = useSelector(timerSelectors.getSetIntervalId);\n  const hendlerBtn = e => {\n    const { name } = e.target;\n\n    if (name === 'onStop' || name === 'onWait') {\n      dispatch(timerOperations[name](setIntervalId));\n      return;\n    }\n\n    dispatch(timerOperations[name]());\n  };\n  return (\n    <div>\n      {!time || (time && !setIntervalId) ? (\n        <button type=\"button\" name=\"onStart\" onClick={hendlerBtn}>\n          Start\n        </button>\n      ) : (\n        <button type=\"button\" name=\"onStop\" onClick={hendlerBtn}>\n          Stop\n        </button>\n      )}\n      <button\n        type=\"button\"\n        name=\"onWait\"\n        onClick={hendlerBtn}\n        disabled={!time || (time && !setIntervalId)}\n      >\n        Wait\n      </button>\n      <button\n        type=\"button\"\n        name=\"onReset\"\n        onClick={hendlerBtn}\n        disabled={!time}\n      >\n        Reset\n      </button>\n    </div>\n  );\n}\n","import Layout from './components/Layout/Layout';\nimport Timer from './components/Timer/Timer';\nimport ButtonControl from './components/ButtonControl/ButtonControl';\n\nexport default function App() {\n  return (\n    <Layout>\n      <Timer />\n      <ButtonControl />\n    </Layout>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport { timerReducer } from './timer';\n\nconst store = configureStore({\n  reducer: timerReducer,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}